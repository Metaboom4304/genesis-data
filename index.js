import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm';

// üîê Supabase Init (–∞–Ω–æ–Ω-–∫–ª—é—á)
const supabase = createClient(
  'https://nysjreargnvyjmcirinp.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im55c2pyZWFyZ252eWptY2lyaW5wIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4MDgxNDIsImV4cCI6MjA3MDM4NDE0Mn0.UZpiU_nM_ACF8bILAGF4oa-WSHaU38KX6Dtz_srZK9Q'
);
window.supabase = supabase;

// ‚úÖ Telegram WebApp: –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
document.addEventListener('DOMContentLoaded', () => {
  const tgUser = window.Telegram?.WebApp?.initDataUnsafe?.user;
  console.log('tgUser:', tgUser);
  if (tgUser) syncUser(tgUser);

  window.Telegram?.WebApp?.ready?.();
});

const tgUser = window.Telegram?.WebApp?.initDataUnsafe?.user;

// üß† –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
async function syncUser(user) {
  console.log(`[user sync] ${user.id} - ${user.username}`);

  const { error: insertError } = await supabase.from('users').upsert([{
    telegram_id: user.id,
    first_name: user.first_name,
    last_name: user.last_name,
    username: user.username
  }], { onConflict: 'telegram_id' });

  if (insertError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', insertError);
  } else {
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω!');
  }
}

// üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ—è –º–µ—Ç–æ–∫
const marksLayer = L.layerGroup().addTo(map);

// üì¶ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ ID —Ç–∞–π–ª–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
function getTileId(lat, lng) {
  const tileSize = 0.05;
  const tileX = Math.floor(lat / tileSize);
  const tileY = Math.floor(lng / tileSize);
  return `${tileX}-${tileY}`;
}

// üìç –ü–æ–¥–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç–æ–∫
async function updateMarks() {
  marksLayer.clearLayers();

  const center = map.getCenter();
  const tileId = getTileId(center.lat, center.lng);

  const { data: marks, error } = await supabase
    .from('user_marks')
    .select('*')
    .eq('tile_id', tileId);

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–∫:', error);
    return;
  }

  if (!marks || marks.length === 0) {
    console.log(`–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç–æ–∫ –¥–ª—è —Ç–∞–π–ª–∞ ${tileId}`);
    return;
  }

  marks.forEach(mark => {
    L.marker([mark.lat, mark.lng])
      .addTo(marksLayer)
      .bindPopup(`
        <b>${mark.title}</b><br>
        ${mark.description}<br>
        <i>–¢–∏–ø: ${mark.resource_type}</i>
      `);
  });
}

map.on('moveend', updateMarks);

// üñ±Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–µ—Ç–∫–∏ –ø–æ –∫–ª–∏–∫—É
map.on('click', async (e) => {
  const { lat, lng } = e.latlng;

  const title = prompt('–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–∫–∏:');
  if (!title) return;

  const description = prompt('–û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ç–∫–∏:') || '';
  const resourceType = prompt('–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, gold, wood):') || 'unknown';
  const tileId = getTileId(lat, lng);

  const { error } = await supabase.from('user_marks').insert([{
    user_id: tgUser?.id || null,
    tile_id: tileId,
    lat,
    lng,
    title,
    description,
    resource_type: resourceType
  }]);

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∫–∏:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç–∫–∏');
  } else {
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
    updateMarks(); // üîÑ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–π
  }
});
